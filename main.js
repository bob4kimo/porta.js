/**==================================================================================
 Main-Target
 A) Encrypt js's all function-name and variables
 B) Encrypt-name could reduce the word-length from original, make single js-size more tiny
 C) Make function-variable's length to minimum, ex:func(apple,ball)->func(a,b)
 D) Go following url for packing ur code, remove all the space from ur code
    http://dean.edwards.name/packer/
 E) If u transfer js by url or http, u need encode js into base64, otherwise base64
    will increase ur data-size
    https://stackoverflow.com/questions/201479/what-is-base-64-encoding-used-for
    
 ToDo:
 -> remove all comment
 -> remove all empty-line
 A) Encrypt-function names are generated by random alphabet char(52 chars for random)
 B) You can choose the encrypted-name's length, ex:func()->xxx() or func()->xx()
 C) If u choose encrypt-name's length is 2, then u will have 52 squared equals 2704 diff names
 D) List all ur count for encrypt-target's and random-name's, random-names must bigger than targets
=====================================================================================*/




/**--------------------------------------------------------------------------------------
 * Entry Point - main execution start from here
---------------------------------------------------------------------------------------*/
// var textBcoreJs = getBcoreJsText();
// textBcoreJs = deleteAllCommentForStr(textBcoreJs);
// textBcoreJs = deleteAllEmptyLineForStr(textBcoreJs);
// showResultOnScreen( textBcoreJs );

// NEXT: randomArr may use base64 encode char
// NEXT: first do encode within func's var







/**--------------------------------------------------------------------------------------
 * Remove all empty-line in target string
 ---------------------------------------------------------------------------------------*/
function deleteAllEmptyLineForStr(str) {
    // separate string into array by diff-line(\n), so each line will be single item
    var arrStr = str.split('\n');
    // remove item from array if it is an empty-line
    for( var i=0; i<arrStr.length; i++ ) {
        if( arrStr[i].length < 1 ) {
            arrStr.splice(i,1);
            // re-check same index item again, otherwise some item may miss
            i--;
        }
    }
    // re-combine array into single string
    return arrStr.join('\n');
}
/**--------------------------------------------------------------------------------------
 * Remove all line-comment in target string
 ---------------------------------------------------------------------------------------*/
function deleteAllCommentForStr(str) {

    while(str.indexOf('//')!==-1){
        str = deleteStrBtwKeywords(str,'//','\n');
    }

    while(str.indexOf('/*')!==-1){
        str = deleteStrBtwKeywords(str,'/*','*/');
    }

    return str;
}
/**--------------------------------------------------------------------------------------
 * Delete chars between key_start and key_end, all string-area will deleted without space
 ---------------------------------------------------------------------------------------*/
function deleteStrBtwKeywords(str,key_start,key_end) {
    var keyword     = key_start;
    var keyword_end = key_end;
    // get keyword and keyword_end's char index
    var indexFrom = str.indexOf(keyword);
    var indexTo = 0;
    var searchRange = 2500;
    // if keyword_end's string length more than 1 search-way will diff, so we need record here
    var keyword_end_length = keyword_end.length>1?keyword_end.length:0;
    // find keyword_end's char-index starts from indexFrom's index
    for( var i = indexFrom; i<indexFrom+searchRange; i++ ) {
        var searchStr = '';
        // when search-target's str-length more than 1, then we need to combine chars in loop
        if( keyword_end_length>1 ) {
            // when we need to find '*/' in looping chars, str[i] will appear '*' only,
            // based on keyword_end's str-length, searchStr=str[i]+str[i+1]+str[i+2]...
            for( var j=0; j<keyword_end_length; j++ ) {
                searchStr += str[i+j];
            }
        } else {
            // when our search-target in loop has only 1 char, then str[i] will be fine
            searchStr = str[i];
        }
        // char matches keyword_end, save with char-index it is
        if( searchStr === keyword_end ) {
            // +1 means all line will be delete, not just left single empty-line
            // +keyword_end_length means when keyword's str-length more than 1,
            // then we need to include them into count also, otherwise some ending-chars
            // will not be deleted in result
            indexTo = i+1+keyword_end_length;
            break;
        }
    }
    return deleteCharFromIndex(str,indexFrom,indexTo);
}
/**--------------------------------------------------------------------------------------
 * Chars between fromIndex and toIndex will be deleted from originalStr
 ---------------------------------------------------------------------------------------*/
function deleteCharFromIndex(originalStr,fromIndex,toIndex) {
    return originalStr.replace(originalStr.substring(fromIndex, toIndex), "");
}





/**--------------------------------------------------------------------------------------
 * Get all keyword's index from target string return array format, target must perfect
 * match to keyword.
 * -------------------------------------------------------------------------------------
 * var str = 'apple.wds;applef;sapple;napplek;apple';
 * log( getKeywordIndexArrFromStr(str,'apple') );     // [0,32]
 ---------------------------------------------------------------------------------------*/
function getKeywordIndexArrFromStr(originalStr, keyword) {
    //----- DEPRECATED -------
    // for (var pos = str.indexOf(keyword); pos !== -1; pos = str.indexOf(keyword, pos + 1)) {
    //     arrKeywordIndex.push(pos);
    //----- DEPRECATED -------

    // array for recording index, return answer
    var arrKeywordIndex = [];
    // copy original string to temp, temp-str will do some modify, content will change
    var tempStr = originalStr;
    // regular expression for perfect match keyword
    var regex = new RegExp('\\b' + keyword + '\\b');
    // for blocking the keyword we already in count
    var keywordMask = '';
    // generate keyword-mask, for blocking the keyword in string
    for( var i=0; i<keyword.length; i++ ) {
        keywordMask += 'x';
    }

    // for recording current keyword-index
    var keywordIndex = -1;
    // search whole string to find keyword-index, if exist save index to var and return true
    function isKeywordInsideStr(str) {
        keywordIndex = str.search(regex);
        return keywordIndex>-1;
    }

    // when there is still keyword inside tempStr, keep searching
    while( isKeywordInsideStr(tempStr) ) {
        // keyword-index exist, save into array
        arrKeywordIndex.push(keywordIndex);
        // overwrite keyword to "keywordMask", so searching will not find repeated index,
        // this index we have saved it, break-down this keyword and looping will find next new index
        tempStr = replaceStrAt(tempStr,keywordIndex,keyword,keywordMask);
    }

    return arrKeywordIndex;
}





/**--------------------------------------------------------------------------------------
 * Replace keyword to new one in string
 * -------------------------------------------------------------------------------------
 * originalStr: ur main string
 * startIndex:  replace-target's char index
 * targetStr:   replace-target's string
 * replaceStr:  new string we are going to replaced
 * -------------------------------------------------------------------------------------
 * var mainStr = 'This is an apple.';
 * log( replaceStrAt(mainStr,11,'apple','orange') );      // This is an orange.
 ---------------------------------------------------------------------------------------*/
function replaceStrAt(originStr, startIndex, targetStr, replaceStr) {
    var charSpace = targetStr.length;
    return originStr.substring(0, startIndex) + replaceStr + originStr.substring(startIndex + charSpace, originStr.length);
}





/**--------------------------------------------------------------------------------------
 * Make random-name array for replacing function or variable, return name array
 * --------------------------------------------------------------------------------------
 * nameLength: each name's length, ex:nameLength=2 name=xx, nameLength=3 name=xxx
 * arrCount: how many name in this arr u are going to make
---------------------------------------------------------------------------------------*/
function getRandomNameArr(nameLength, arrCount) {
    //----- we have 52 chars in arr, random-name's char will based on those chars -----//
    var arrAlphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
    //----- make sure target-string do not exist in this arr -----//
    function isStrInsideArr(arr, targetStr) {
        var isFound = false;
        for (var i = 0; i < arr.length && !isFound; i++) {
            if (arr[i] === targetStr) {
                isFound = true;
            }
        }
        return isFound;
    }
    //----- get a random int from a range, ex:0~51 for arrAlphabet ------//
    function getRandomIntBetween(start, end) {
        return Math.floor(Math.random() * end) + start;
    }
    //----- get a random alphabet-char from arrAlphabet ------//
    function getRandomAlphabet() {
        return arrAlphabet[getRandomIntBetween(0, 51)];
    }
    //----- get a random string by str-length, if length=2, ans=as,jy,wp... ------//
    function getRandomNameByLength(length) {
        var ans = '';
        for (var i = 0; i < length; i++) {
            ans = ans.concat(getRandomAlphabet());
        }
        return ans;
    }
    
    var arr = [];
    for (var i = 0; i < arrCount; i++) {
        var name = getRandomNameByLength(nameLength);
        //----- make sure new-name always new not repeated -----//
        if (!isStrInsideArr(arr, name)) {
            arr.push(name);
        } else {
            //----- if name repeated, get a new random again -----//
            i--;
        }
    }
    return arr;
}








function isCharAlphabet(char) {
    return isStrInsideArr(arrAlphabet, char);
}


function getKeywordNextChar(allString, keyword, keywordIndex) {
    //        return allString.substring(keywordIndex+keyword.length,keywordIndex+keyword.length+1);
    var ans = '';
    var scanCharDis = 10;
    var keywordLength = keyword.length;
    var arr = [];
    for (var i = 0; i < scanCharDis; i++) {
        arr.push(allString.substring(keywordIndex + keywordLength, keywordIndex + keywordLength + 1 + i))
    }
    for (i = 0; i < arr.length; i++) {
        var v = arr[i];
        //----- when char not 'space' and 'changeLine' -----//
        if (!(v.indexOf(' ') > -1) && !(v.indexOf('\n') > -1) && !(v.indexOf('-') > -1)) {
            ans = v;
            break;
        }
    }
    //        log(ans);
    return ans;
}

function getKeywordPreviousChar(allString, keywordIndex) {
    //        return allString.substring(keywordIndex - 1, keywordIndex);
    var ans = '';
    var scanCharDis = 50;
    var arr = [];
    for (var i = 0; i < scanCharDis; i++) {
        if (i > 0)
            arr.push(allString.substring(keywordIndex - (i), keywordIndex));
    }
    for (i = 0; i < arr.length; i++) {
        var v = arr[i];
        //----- when char not 'space' and 'changeLine' -----//
        if (!(v.indexOf(' ') > -1) && !(v.indexOf('\n') > -1) && !(v.indexOf('-') > -1) && v.length > 0) {
            ans = v;
            break;
        }
    }
    return ans;
}














function encryptBcoreJs(localFile, func) {

    //----- core's all keyword -----//
    var arr1 = getCoreFuncNameArr();
    var arr2 = getCoreProtoNameArr();
    arr1.push.apply(arr1, arr2);

    func(arr1);





    function getCoreProtoNameArr() {
        var arrTemp1 = [];
        var arrTemp2 = [];
        var tempVar1 = '';
        var tempVar2 = '';
        var countIndex = 0;
        arrTemp1 = localFile.split('\n');
        arrTemp1.forEach(function (v) {
            if (v.indexOf('Sprite.prototype.') === 0) {
                arrTemp2.push(v);
            }

        });
        arrTemp1 = [];
        arrTemp2.forEach(function (v) {
            arrTemp1.push(v.split('Sprite.prototype.')[1]);
        });
        arrTemp2 = [];
        arrTemp1.forEach(function (v) {
            arrTemp2.push(v.split(' =')[0]);
        });
        return arrTemp2;
    }






    function getCoreFuncNameArr() {
        var arrTemp1 = [];
        var arrTemp2 = [];
        var tempVar1 = '';
        var tempVar2 = '';
        //----- extra all function name without prototype-name -----//
        arrTemp1 = localFile.split('\n');
        arrTemp1.forEach(function (v) {
            //----- extract which 'function' on the head of string -----//
            if (v.indexOf('function') === 0) {
                arrTemp2.push(v);
            }
        });
        arrTemp1 = [];
        arrTemp2.forEach(function (v) {
            tempVar1 = v.split('(')[0];
            tempVar2 = tempVar1.split(' ')[1];
            arrTemp1.push(tempVar2);
        });
        return arrTemp1;
    }

}



function encryptTargetJs(localFile, arrBcoreKeyWords) {

    var arrTemp1 = getNoRepeatVarNameArr2();
    var arrNewName = getRandomNameArr(3, arrTemp1.length);
    var countIndex = 0;
    arrTemp1.forEach(function (v) {
        while (getNextValidKeywordIndex(v) > 0) {
            var targetIndex = getNextValidKeywordIndex(v);
            localFile = replaceStrAt(localFile, targetIndex, v, arrNewName[countIndex]);
        }
        countIndex++;
    });
    log(localFile);



    //----- sometime indexOf() finds keyword is not valid -----//
    function isKeywordValid(allStr, keywordIndex, keyword) {
        var ans = true;

        var charL = getKeywordPreviousChar(allStr, keywordIndex);
        var charR = getKeywordNextChar(allStr, keyword, keywordIndex);

        function isCharLAlphabet() {
            return isCharAlphabet(charL);
        }

        function isCharRAlphabet() {
            return isCharAlphabet(charR);
        }

        function isCharLQMark() {
            return (charL === '"');
        }

        function isCharRQMark() {
            return (charR === '"');
        }

        if (isCharLAlphabet() || isCharRAlphabet() || isCharLQMark() || isCharRQMark())
            ans = false;

        return ans;
    }



    function getNextValidKeywordIndex(keyword) {
        //----- if we can not find any valid keyword, return -1 -----//
        var ansIndex = -1;

        var targetIndex = localFile.indexOf(keyword);

        if (isKeywordValid(localFile, targetIndex, keyword)) {
            ansIndex = targetIndex;
        }

        return ansIndex;
    }




    //----- get var-name and not-repeat with bcore's keywords -----//
    function getNoRepeatVarNameArr2() {
        var arrTemp1 = getNoRepeatVarNameArr();
        var arrTemp2 = [];
        arrTemp1.forEach(function (v) {
            if (!isStrInsideArr(arrBcoreKeyWords, v)) {
                arrTemp2.push(v);
            }
        });
        return arrTemp2;
    }



    //----- FINAL: best way to get var-name array without lost -----//
    function getNoRepeatVarNameArr() {
        var arrTemp1 = [];
        var arrTemp2 = [];
        var arrTemp3 = [];
        var arrTemp4 = [];
        var countIndex = 0;
        var tempVar = '';
        arrTemp1 = localFile.split('var ');
        arrTemp1.forEach(function (v) {
            //----- if each string contains '=', means this could be var -----//
            if (v.indexOf('=') > -1) {
                arrTemp2.push(v);
            }
        });
        arrTemp2.forEach(function (v) {
            //----- when first 3 of index contain alphabet char, means could be var -----//
            if (isCharAlphabet(v[0]) && isCharAlphabet(v[1]) && isCharAlphabet(v[2])) {
                arrTemp3.push(v);
            }
        });
        arrTemp3.forEach(function (v) {
            //----- get string before '=' -----//
            arrTemp4.push(v.split(' =')[0]);
        });
        arrTemp4.forEach(function (v) {
            //----- remove ';' and after string -----//
            if (v.indexOf(';') > -1) {
                tempVar = v.split(';')[0];
                delete arrTemp4[countIndex];
                arrTemp4[countIndex] = tempVar;
            }
            countIndex++;
        });
        arrTemp3 = [];
        arrTemp4.forEach(function (v) {
            if (!isStrInsideArr(arrTemp3, v)) {
                arrTemp3.push(v);
            }
        });

        return arrTemp3;
    }
}






/**--------------------------------------------------------------------------------------
 * According to load text file from local having security problems, static js from here
---------------------------------------------------------------------------------------*/
function getBcoreJsText() {
    var ss = '';
    // var ss = 'Ly8tLS0tLS0tLS0tLS0tIFNQUklURSBDTEFTUyAtLS0tLS0tLS0tLS0tLS0tLy8KZnVuY3Rpb24gYXBwbGUoKXsKLy8gaGVsbG8gd29ybGQKfQovKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiBBY2NvcmRpbmcgdG8gbG9hZCB0ZXh0IGZpbGUgZnJvbSBsb2NhbCBoYXZpbmcgc2VjdXJpdHkgcHJvYmxlbXMsIHN0YXRpYyBqcyBmcm9tIGhlcmUKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KZnVuY3Rpb24gc3VuKCl7Ci8vY29tbWVudCBsaW5lIGhlcmUKdmFyIGFhID0gJyc7CnZhciBiYiA9ICcnOwp9Ci8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICogUFJPQkxFTVMoMjAxN0phbik6CiAqIDEpIE5vdG9TYW5zVEMgaXMgbm90IGFzIGdvb2QgYXMgd2UgdGhvdWdoIGluIGJyb3dzZXIncyBmb250IGRpc3BsYXkKICogMikgVGhpcyBmb250IGxldCBzbWFsbCB0ZXh0IGRpc3BsYXkgd2VsbCwgd2lsbCB0ZXN0IGluIGZ1dHVyZQogKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAqIDEpIEJlZm9yZSBOb3RvU2Fuc1RDIGxvYWRlZCwgdXNpbmcgdXNlcidzIGxvY2FsIGZvbnQgZm9yIGRlZmF1bHQKICogMikgV2hlbiBOb3RvU2Fuc1RDIGxvYWQgZG9uZSwgbWFrZSBOb3RvU2Fuc1RDIGZvciBkZWZhdWx0IGZvbnQgYXV0b21hdGljYWxseQogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSov';
    //----- return base64 decoded -----//
    return atob(ss);
}




/**--------------------------------------------------------------------------------------
 * DEBUG-USAGE: Show any result on sprite-text-view
---------------------------------------------------------------------------------------*/
function showResultOnScreen(v) {
    var textView = new Sprite();
    textView.initTextArea();
    textView.frame(0,0,700,500);
    textView.colorHex('009900');
    textView.textColor('FFFFFF');
    textView.textSize('16');
    textView.applyText(v);
}





///**--------------------------------------------------------------------------------------
// * DEPRECATED - Try to load text file from local, but having security problems
//---------------------------------------------------------------------------------------*/
////----- input btn on screen for open local file -----//
//document.getElementById('fileInput').addEventListener('change', readSingleFile, false);
//
////----- loaded local-file -----//
//var localFileBcore = '';
//var localFile = '';
//
//
////----- for increase test speed, we load local js directly, testonly -----//
////----- localFile should init by input and readSingleFile -----//
//readLocalFileByPath('../_com/bcore.js', function (v) {
//    //        localFileBcore = v;
//    encryptBcoreJs(v, function (v) {
//        localFileBcore = v;
//        readLocalFileByPath('./PushTarget.js', function (v) {
//            encryptTargetJs(v, localFileBcore);
//        });
//    });
//});
///**----------------------------------------------------------------
// * Read file from local path
//-----------------------------------------------------------------*/
//function readLocalFileByPath(path, func) {
//    var client = new XMLHttpRequest();
//    client.open('GET', path, true);
//    client.onreadystatechange = function () {
//        if (this.readyState == 4 && this.status == 200) {
//            func(client.responseText);
//        }
//    };
//    client.send();
//}
//function autoStartDownload(data, filename, type) {
//    var a = document.createElement("a"),
//        file = new Blob([data], {
//            type: type
//        });
//    if (window.navigator.msSaveOrOpenBlob) // IE10+
//        window.navigator.msSaveOrOpenBlob(file, filename);
//    else { // Others
//        var url = URL.createObjectURL(file);
//        a.href = url;
//        a.download = filename;
//        document.body.appendChild(a);
//        a.click();
//        setTimeout(function () {
//            document.body.removeChild(a);
//            window.URL.revokeObjectURL(url);
//        }, 0);
//    }
//}
//function readSingleFile(e) {
//
//    var file = e.target.files[0];
//    if (!file) {
//        return;
//    }
//    var reader = new FileReader();
//    reader.onload = function (e) {
//        localFile = e.target.result;
//        analysisLoadedFile();
//    };
//    reader.readAsText(file);
//}
